//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `types.plist`.
    static let typesPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "types", pathExtension: "plist")
    
    /// `bundle.url(forResource: "types", withExtension: "plist")`
    static func typesPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typesPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 100 images.
  struct image {
    /// Image `[OK]`.
    static let oK = Rswift.ImageResource(bundle: R.hostingBundle, name: "[OK]")
    /// Image `[fan_同情]`.
    static let fan_同情 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_同情]")
    /// Image `[fan_哇美女]`.
    static let fan_哇美女 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_哇美女]")
    /// Image `[fan_哭泣]`.
    static let fan_哭泣 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_哭泣]")
    /// Image `[fan_奸笑]`.
    static let fan_奸笑 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_奸笑]")
    /// Image `[fan_帅]`.
    static let fan_帅 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_帅]")
    /// Image `[fan_弱爆了]`.
    static let fan_弱爆了 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_弱爆了]")
    /// Image `[fan_感动]`.
    static let fan_感动 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_感动]")
    /// Image `[fan_愤怒]`.
    static let fan_愤怒 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_愤怒]")
    /// Image `[fan_扣鼻屎]`.
    static let fan_扣鼻屎 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_扣鼻屎]")
    /// Image `[fan_拍手]`.
    static let fan_拍手 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_拍手]")
    /// Image `[fan_撞墙]`.
    static let fan_撞墙 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_撞墙]")
    /// Image `[fan_汗]`.
    static let fan_汗 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_汗]")
    /// Image `[fan_顶呱呱]`.
    static let fan_顶呱呱 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_顶呱呱]")
    /// Image `[fan_飞吻]`.
    static let fan_飞吻 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_飞吻]")
    /// Image `[fan_高兴]`.
    static let fan_高兴 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_高兴]")
    /// Image `[fan_鼻血]`.
    static let fan_鼻血 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[fan_鼻血]")
    /// Image `[不许动]`.
    static let 不许动 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[不许动]")
    /// Image `[亲亲]`.
    static let 亲亲 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[亲亲]")
    /// Image `[便便]`.
    static let 便便 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[便便]")
    /// Image `[再见]`.
    static let 再见 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[再见]")
    /// Image `[勾引]`.
    static let 勾引 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[勾引]")
    /// Image `[合十]`.
    static let 合十 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[合十]")
    /// Image `[吐血]`.
    static let 吐血 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[吐血]")
    /// Image `[呕吐]`.
    static let 呕吐 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[呕吐]")
    /// Image `[呲牙]`.
    static let 呲牙 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[呲牙]")
    /// Image `[哭笑]`.
    static let 哭笑 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[哭笑]")
    /// Image `[哼]`.
    static let 哼 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[哼]")
    /// Image `[喇叭]`.
    static let 喇叭 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[喇叭]")
    /// Image `[大哭]`.
    static let 大哭 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[大哭]")
    /// Image `[就不听]`.
    static let 就不听 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[就不听]")
    /// Image `[尴尬]`.
    static let 尴尬 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[尴尬]")
    /// Image `[左]`.
    static let 左 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[左]")
    /// Image `[弱]`.
    static let 弱 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[弱]")
    /// Image `[心碎]`.
    static let 心碎 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[心碎]")
    /// Image `[惊恐]`.
    static let 惊恐 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[惊恐]")
    /// Image `[感动]`.
    static let 感动 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[感动]")
    /// Image `[抠鼻]`.
    static let 抠鼻 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[抠鼻]")
    /// Image `[抱抱]`.
    static let 抱抱 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[抱抱]")
    /// Image `[抱拳]`.
    static let 抱拳 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[抱拳]")
    /// Image `[没办法]`.
    static let 没办法 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[没办法]")
    /// Image `[没眼看]`.
    static let 没眼看 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[没眼看]")
    /// Image `[流汗]`.
    static let 流汗 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[流汗]")
    /// Image `[流泪]`.
    static let 流泪 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[流泪]")
    /// Image `[红心]`.
    static let 红心 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[红心]")
    /// Image `[花心]`.
    static let 花心 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[花心]")
    /// Image `[花痴]`.
    static let 花痴 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[花痴]")
    /// Image `[药]`.
    static let 药 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[药]")
    /// Image `[赞]`.
    static let 赞 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[赞]")
    /// Image `[鄙视]`.
    static let 鄙视 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[鄙视]")
    /// Image `[闭嘴]`.
    static let 闭嘴 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[闭嘴]")
    /// Image `[阴险]`.
    static let 阴险 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[阴险]")
    /// Image `[鼓掌]`.
    static let 鼓掌 = Rswift.ImageResource(bundle: R.hostingBundle, name: "[鼓掌]")
    /// Image `center_icon_follow_zhibo`.
    static let center_icon_follow_zhibo = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_icon_follow_zhibo")
    /// Image `chat_btn_emoji`.
    static let chat_btn_emoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_btn_emoji")
    /// Image `chat_btn_keyboard`.
    static let chat_btn_keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_btn_keyboard")
    /// Image `delete-n`.
    static let deleteN = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete-n")
    /// Image `found-n`.
    static let foundN = Rswift.ImageResource(bundle: R.hostingBundle, name: "found-n")
    /// Image `found-p`.
    static let foundP = Rswift.ImageResource(bundle: R.hostingBundle, name: "found-p")
    /// Image `good0_30x30`.
    static let good0_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good0_30x30")
    /// Image `good1_30x30`.
    static let good1_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good1_30x30")
    /// Image `good2_30x30`.
    static let good2_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good2_30x30")
    /// Image `good3_30x30`.
    static let good3_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good3_30x30")
    /// Image `good4_30x30`.
    static let good4_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good4_30x30")
    /// Image `good5_30x30`.
    static let good5_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good5_30x30")
    /// Image `good6_30x30`.
    static let good6_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good6_30x30")
    /// Image `good7_30x30`.
    static let good7_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good7_30x30")
    /// Image `good8_30x30`.
    static let good8_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good8_30x30")
    /// Image `good9_30x30`.
    static let good9_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "good9_30x30")
    /// Image `home_icon_live`.
    static let home_icon_live = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_live")
    /// Image `home_icon_people`.
    static let home_icon_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_people")
    /// Image `home_pic_default`.
    static let home_pic_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_pic_default")
    /// Image `homepage_btn_play_n`.
    static let homepage_btn_play_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "homepage_btn_play_n")
    /// Image `icon1`.
    static let icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon1")
    /// Image `icon2`.
    static let icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon2")
    /// Image `live-n`.
    static let liveN = Rswift.ImageResource(bundle: R.hostingBundle, name: "live-n")
    /// Image `live-p`.
    static let liveP = Rswift.ImageResource(bundle: R.hostingBundle, name: "live-p")
    /// Image `menu_btn_close`.
    static let menu_btn_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_btn_close")
    /// Image `menu_btn_share`.
    static let menu_btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_btn_share")
    /// Image `mine-n`.
    static let mineN = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine-n")
    /// Image `mine-p`.
    static let mineP = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine-p")
    /// Image `more_btn_flyscreen`.
    static let more_btn_flyscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_btn_flyscreen")
    /// Image `more_btn_radio`.
    static let more_btn_radio = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_btn_radio")
    /// Image `more_btn_redbag`.
    static let more_btn_redbag = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_btn_redbag")
    /// Image `more_btn_report`.
    static let more_btn_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_btn_report")
    /// Image `ranking-n`.
    static let rankingN = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking-n")
    /// Image `ranking-p`.
    static let rankingP = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking-p")
    /// Image `room_btn_chat`.
    static let room_btn_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "room_btn_chat")
    /// Image `room_btn_gift`.
    static let room_btn_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "room_btn_gift")
    /// Image `room_btn_more`.
    static let room_btn_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "room_btn_more")
    /// Image `room_btn_qfstar`.
    static let room_btn_qfstar = Rswift.ImageResource(bundle: R.hostingBundle, name: "room_btn_qfstar")
    /// Image `search_btn_follow`.
    static let search_btn_follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_btn_follow")
    /// Image `share_btn_link`.
    static let share_btn_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_btn_link")
    /// Image `share_btn_pyq`.
    static let share_btn_pyq = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_btn_pyq")
    /// Image `share_btn_qq`.
    static let share_btn_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_btn_qq")
    /// Image `share_btn_qzone`.
    static let share_btn_qzone = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_btn_qzone")
    /// Image `share_btn_wechat`.
    static let share_btn_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_btn_wechat")
    /// Image `share_btn_weibo`.
    static let share_btn_weibo = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_btn_weibo")
    /// Image `zhibo_btn_people`.
    static let zhibo_btn_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhibo_btn_people")
    /// Image `zhibo_icon_arrow`.
    static let zhibo_icon_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhibo_icon_arrow")
    
    /// `UIImage(named: "[OK]", bundle: ..., traitCollection: ...)`
    static func oK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oK, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_同情]", bundle: ..., traitCollection: ...)`
    static func fan_同情(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_同情, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_哇美女]", bundle: ..., traitCollection: ...)`
    static func fan_哇美女(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_哇美女, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_哭泣]", bundle: ..., traitCollection: ...)`
    static func fan_哭泣(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_哭泣, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_奸笑]", bundle: ..., traitCollection: ...)`
    static func fan_奸笑(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_奸笑, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_帅]", bundle: ..., traitCollection: ...)`
    static func fan_帅(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_帅, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_弱爆了]", bundle: ..., traitCollection: ...)`
    static func fan_弱爆了(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_弱爆了, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_感动]", bundle: ..., traitCollection: ...)`
    static func fan_感动(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_感动, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_愤怒]", bundle: ..., traitCollection: ...)`
    static func fan_愤怒(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_愤怒, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_扣鼻屎]", bundle: ..., traitCollection: ...)`
    static func fan_扣鼻屎(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_扣鼻屎, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_拍手]", bundle: ..., traitCollection: ...)`
    static func fan_拍手(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_拍手, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_撞墙]", bundle: ..., traitCollection: ...)`
    static func fan_撞墙(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_撞墙, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_汗]", bundle: ..., traitCollection: ...)`
    static func fan_汗(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_汗, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_顶呱呱]", bundle: ..., traitCollection: ...)`
    static func fan_顶呱呱(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_顶呱呱, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_飞吻]", bundle: ..., traitCollection: ...)`
    static func fan_飞吻(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_飞吻, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_高兴]", bundle: ..., traitCollection: ...)`
    static func fan_高兴(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_高兴, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[fan_鼻血]", bundle: ..., traitCollection: ...)`
    static func fan_鼻血(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fan_鼻血, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[不许动]", bundle: ..., traitCollection: ...)`
    static func 不许动(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.不许动, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[亲亲]", bundle: ..., traitCollection: ...)`
    static func 亲亲(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.亲亲, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[便便]", bundle: ..., traitCollection: ...)`
    static func 便便(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.便便, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[再见]", bundle: ..., traitCollection: ...)`
    static func 再见(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.再见, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[勾引]", bundle: ..., traitCollection: ...)`
    static func 勾引(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.勾引, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[合十]", bundle: ..., traitCollection: ...)`
    static func 合十(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.合十, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[吐血]", bundle: ..., traitCollection: ...)`
    static func 吐血(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.吐血, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[呕吐]", bundle: ..., traitCollection: ...)`
    static func 呕吐(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.呕吐, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[呲牙]", bundle: ..., traitCollection: ...)`
    static func 呲牙(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.呲牙, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[哭笑]", bundle: ..., traitCollection: ...)`
    static func 哭笑(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.哭笑, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[哼]", bundle: ..., traitCollection: ...)`
    static func 哼(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.哼, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[喇叭]", bundle: ..., traitCollection: ...)`
    static func 喇叭(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.喇叭, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[大哭]", bundle: ..., traitCollection: ...)`
    static func 大哭(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.大哭, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[就不听]", bundle: ..., traitCollection: ...)`
    static func 就不听(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.就不听, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[尴尬]", bundle: ..., traitCollection: ...)`
    static func 尴尬(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.尴尬, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[左]", bundle: ..., traitCollection: ...)`
    static func 左(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.左, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[弱]", bundle: ..., traitCollection: ...)`
    static func 弱(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.弱, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[心碎]", bundle: ..., traitCollection: ...)`
    static func 心碎(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.心碎, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[惊恐]", bundle: ..., traitCollection: ...)`
    static func 惊恐(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.惊恐, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[感动]", bundle: ..., traitCollection: ...)`
    static func 感动(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.感动, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[抠鼻]", bundle: ..., traitCollection: ...)`
    static func 抠鼻(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.抠鼻, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[抱抱]", bundle: ..., traitCollection: ...)`
    static func 抱抱(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.抱抱, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[抱拳]", bundle: ..., traitCollection: ...)`
    static func 抱拳(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.抱拳, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[没办法]", bundle: ..., traitCollection: ...)`
    static func 没办法(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.没办法, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[没眼看]", bundle: ..., traitCollection: ...)`
    static func 没眼看(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.没眼看, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[流汗]", bundle: ..., traitCollection: ...)`
    static func 流汗(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.流汗, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[流泪]", bundle: ..., traitCollection: ...)`
    static func 流泪(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.流泪, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[红心]", bundle: ..., traitCollection: ...)`
    static func 红心(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.红心, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[花心]", bundle: ..., traitCollection: ...)`
    static func 花心(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.花心, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[花痴]", bundle: ..., traitCollection: ...)`
    static func 花痴(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.花痴, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[药]", bundle: ..., traitCollection: ...)`
    static func 药(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.药, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[赞]", bundle: ..., traitCollection: ...)`
    static func 赞(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.赞, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[鄙视]", bundle: ..., traitCollection: ...)`
    static func 鄙视(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.鄙视, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[闭嘴]", bundle: ..., traitCollection: ...)`
    static func 闭嘴(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.闭嘴, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[阴险]", bundle: ..., traitCollection: ...)`
    static func 阴险(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.阴险, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "[鼓掌]", bundle: ..., traitCollection: ...)`
    static func 鼓掌(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.鼓掌, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_icon_follow_zhibo", bundle: ..., traitCollection: ...)`
    static func center_icon_follow_zhibo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_icon_follow_zhibo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_btn_emoji", bundle: ..., traitCollection: ...)`
    static func chat_btn_emoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_btn_emoji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_btn_keyboard", bundle: ..., traitCollection: ...)`
    static func chat_btn_keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_btn_keyboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete-n", bundle: ..., traitCollection: ...)`
    static func deleteN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "found-n", bundle: ..., traitCollection: ...)`
    static func foundN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foundN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "found-p", bundle: ..., traitCollection: ...)`
    static func foundP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foundP, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good0_30x30", bundle: ..., traitCollection: ...)`
    static func good0_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good0_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good1_30x30", bundle: ..., traitCollection: ...)`
    static func good1_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good1_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good2_30x30", bundle: ..., traitCollection: ...)`
    static func good2_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good2_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good3_30x30", bundle: ..., traitCollection: ...)`
    static func good3_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good3_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good4_30x30", bundle: ..., traitCollection: ...)`
    static func good4_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good4_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good5_30x30", bundle: ..., traitCollection: ...)`
    static func good5_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good5_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good6_30x30", bundle: ..., traitCollection: ...)`
    static func good6_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good6_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good7_30x30", bundle: ..., traitCollection: ...)`
    static func good7_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good7_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good8_30x30", bundle: ..., traitCollection: ...)`
    static func good8_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good8_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "good9_30x30", bundle: ..., traitCollection: ...)`
    static func good9_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good9_30x30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_icon_live", bundle: ..., traitCollection: ...)`
    static func home_icon_live(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_live, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_icon_people", bundle: ..., traitCollection: ...)`
    static func home_icon_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_pic_default", bundle: ..., traitCollection: ...)`
    static func home_pic_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_pic_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homepage_btn_play_n", bundle: ..., traitCollection: ...)`
    static func homepage_btn_play_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_btn_play_n, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon1", bundle: ..., traitCollection: ...)`
    static func icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon2", bundle: ..., traitCollection: ...)`
    static func icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "live-n", bundle: ..., traitCollection: ...)`
    static func liveN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liveN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "live-p", bundle: ..., traitCollection: ...)`
    static func liveP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liveP, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_btn_close", bundle: ..., traitCollection: ...)`
    static func menu_btn_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_btn_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_btn_share", bundle: ..., traitCollection: ...)`
    static func menu_btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine-n", bundle: ..., traitCollection: ...)`
    static func mineN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mineN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine-p", bundle: ..., traitCollection: ...)`
    static func mineP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mineP, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_btn_flyscreen", bundle: ..., traitCollection: ...)`
    static func more_btn_flyscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_btn_flyscreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_btn_radio", bundle: ..., traitCollection: ...)`
    static func more_btn_radio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_btn_radio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_btn_redbag", bundle: ..., traitCollection: ...)`
    static func more_btn_redbag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_btn_redbag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_btn_report", bundle: ..., traitCollection: ...)`
    static func more_btn_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_btn_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ranking-n", bundle: ..., traitCollection: ...)`
    static func rankingN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rankingN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ranking-p", bundle: ..., traitCollection: ...)`
    static func rankingP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rankingP, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "room_btn_chat", bundle: ..., traitCollection: ...)`
    static func room_btn_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.room_btn_chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "room_btn_gift", bundle: ..., traitCollection: ...)`
    static func room_btn_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.room_btn_gift, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "room_btn_more", bundle: ..., traitCollection: ...)`
    static func room_btn_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.room_btn_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "room_btn_qfstar", bundle: ..., traitCollection: ...)`
    static func room_btn_qfstar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.room_btn_qfstar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_btn_follow", bundle: ..., traitCollection: ...)`
    static func search_btn_follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_btn_follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_btn_link", bundle: ..., traitCollection: ...)`
    static func share_btn_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_btn_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_btn_pyq", bundle: ..., traitCollection: ...)`
    static func share_btn_pyq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_btn_pyq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_btn_qq", bundle: ..., traitCollection: ...)`
    static func share_btn_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_btn_qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_btn_qzone", bundle: ..., traitCollection: ...)`
    static func share_btn_qzone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_btn_qzone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_btn_wechat", bundle: ..., traitCollection: ...)`
    static func share_btn_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_btn_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_btn_weibo", bundle: ..., traitCollection: ...)`
    static func share_btn_weibo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_btn_weibo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zhibo_btn_people", bundle: ..., traitCollection: ...)`
    static func zhibo_btn_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhibo_btn_people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zhibo_icon_arrow", bundle: ..., traitCollection: ...)`
    static func zhibo_icon_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhibo_icon_arrow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `HomeAnchorViewController`.
    static let homeAnchorViewController = _R.nib._HomeAnchorViewController()
    /// Nib `HomeChatToolsView`.
    static let homeChatToolsView = _R.nib._HomeChatToolsView()
    /// Nib `HomeChildCollectionViewCell`.
    static let homeChildCollectionViewCell = _R.nib._HomeChildCollectionViewCell()
    /// Nib `HomeChildViewController`.
    static let homeChildViewController = _R.nib._HomeChildViewController()
    /// Nib `TestViewController`.
    static let testViewController = _R.nib._TestViewController()
    
    /// `UINib(name: "HomeAnchorViewController", in: bundle)`
    static func homeAnchorViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeAnchorViewController)
    }
    
    /// `UINib(name: "HomeChatToolsView", in: bundle)`
    static func homeChatToolsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeChatToolsView)
    }
    
    /// `UINib(name: "HomeChildCollectionViewCell", in: bundle)`
    static func homeChildCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeChildCollectionViewCell)
    }
    
    /// `UINib(name: "HomeChildViewController", in: bundle)`
    static func homeChildViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeChildViewController)
    }
    
    /// `UINib(name: "TestViewController", in: bundle)`
    static func testViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.testViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Discover`.
    static let discover = _R.storyboard.discover()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Rank`.
    static let rank = _R.storyboard.rank()
    
    /// `UIStoryboard(name: "Discover", bundle: ...)`
    static func discover(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.discover)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Rank", bundle: ...)`
    static func rank(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rank)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeAnchorViewController.validate()
      try _HomeChildCollectionViewCell.validate()
    }
    
    struct _HomeAnchorViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeAnchorViewController"
      
      func fifthView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[4] as? UIKit.UIView
      }
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func fourthView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[3] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      func thirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[2] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "room_btn_qfstar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'room_btn_qfstar' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon2' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "room_btn_gift", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'room_btn_gift' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_btn_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_btn_close' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_btn_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_btn_share' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "room_btn_chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'room_btn_chat' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zhibo_btn_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zhibo_btn_people' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "room_btn_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'room_btn_more' is used in nib 'HomeAnchorViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeChatToolsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeChatToolsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeChatToolsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeChatToolsView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeChildCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeChildCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeChildCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeChildCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "home_icon_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_icon_people' is used in nib 'HomeChildCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_icon_live", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_icon_live' is used in nib 'HomeChildCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeChildViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeChildViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TestViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TestViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try home.validate()
      try discover.validate()
      try rank.validate()
      try profile.validate()
    }
    
    struct discover: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Discover"
      
      static func validate() throws {
        if UIKit.UIImage(named: "found-n") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'found-n' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "found-p") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'found-p' is used in storyboard 'Discover', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeNavViewController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      static func validate() throws {
        if UIKit.UIImage(named: "live-n") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'live-n' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "live-p") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'live-p' is used in storyboard 'Home', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Profile"
      
      static func validate() throws {
        if UIKit.UIImage(named: "mine-n") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mine-n' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mine-p") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mine-p' is used in storyboard 'Profile', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct rank: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Rank"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ranking-p") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ranking-p' is used in storyboard 'Rank', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ranking-n") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ranking-n' is used in storyboard 'Rank', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
